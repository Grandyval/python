# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell():
    def __init__(self, volume):
        self.volume = volume

    def __add__(self, other):
        return Cell(self.volume + other.volume)

    def __sub__(self, other):
        res = Cell(self.volume - other.volume)
        if res.volume > 0:
            return res
        else:
            print("Клетка уничтожена")
            res.volume = None
            return res


    def __mul__(self, other):
        return Cell(self.volume * other.volume)

    def __truediv__(self, other):
        return Cell(self.volume // other.volume)

    def make_order(self, line):
        full_line = "*" * line
        part_line = "*" * (self.volume % line)
        res_line = ""
        for i in range(self.volume // line):
            res_line += full_line + "\n"
        res_line += part_line
        return res_line


cell1 = Cell(20)
cell2 = Cell(7)
cell3 = cell1 + cell2
print(cell3.volume)
cell3 = cell1 - cell2
print(cell3.volume)
cell3 = cell1 * cell2
print(cell3.volume)
cell3 = cell1 / cell2
print(cell3.volume)
print(cell1.make_order(6))
